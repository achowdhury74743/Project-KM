package server.models.services;

import server.Logger;
import server.DatabaseConnection;
import server.models.UserRiderLevel;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

public class UserRiderLevelService {

    public static String selectAllInto(List<UserRiderLevel> targetList) {
        targetList.clear();
        try {
            PreparedStatement statement = DatabaseConnection.newStatement(
                "SELECT User ID, Rider ID, Rider Level, Rider EXP, Rider EXP to Next Level FROM UserRiderLevel"
            );
            if (statement != null) {
                ResultSet results = statement.executeQuery();
                if (results != null) {
                    while (results.next()) {
                        targetList.add(new UserRiderLevel(results.getInt("User ID"), results.getInt("Rider ID"), results.getInt("Rider Level"), results.getInt("Rider EXP"), results.getInt("Rider EXP to Next Level")));


                    }
                }
            }
        } catch (SQLException resultsException) {
            String error = "Database error - can't select all from 'UserRiderLevel' table: " + resultsException.getMessage();

            Logger.log(error);
            return error;
        }
        return "OK";
    }

    public static UserRiderLevel selectById(int id) {
        UserRiderLevel result = null;
        try {
            PreparedStatement statement = DatabaseConnection.newStatement(
                "SELECT User ID, Rider ID, Rider Level, Rider EXP, Rider EXP to Next Level FROM UserRiderLevel WHERE User ID = ?"
            );
            if (statement != null) {
                statement.setInt(1, id);
                ResultSet results = statement.executeQuery();
                if (results != null && results.next()) {
                    result = new UserRiderLevel(results.getInt("User ID"), results.getInt("Rider ID"), results.getInt("Rider Level"), results.getInt("Rider EXP"), results.getInt("Rider EXP to Next Level"));


                }
            }
        } catch (SQLException resultsException) {
            String error = "Database error - can't select by id from 'UserRiderLevel' table: " + resultsException.getMessage();

            Logger.log(error);
        }
        return result;
    }

    public static String insert(UserRiderLevel itemToSave) {
        try {
            PreparedStatement statement = DatabaseConnection.newStatement(
                "INSERT INTO UserRiderLevel (User ID, Rider ID, Rider Level, Rider EXP, Rider EXP to Next Level) VALUES (?, ?, ?, ?, ?)"
            );
            statement.setInt(1, itemToSave.getUser ID());
            statement.setInt(2, itemToSave.getRider ID());
            statement.setInt(3, itemToSave.getRider level());
            statement.setInt(4, itemToSave.getRider EXP());
            statement.setInt(5, itemToSave.getRider EXP to next level());











            statement.executeUpdate();
            return "OK";
        } catch (SQLException resultsException) {
            String error = "Database error - can't insert into 'UserRiderLevel' table: " + resultsException.getMessage();

            Logger.log(error);
            return error;
        }
    }

    public static String update(UserRiderLevel itemToSave) {
        try {
            PreparedStatement statement = DatabaseConnection.newStatement(
                "UPDATE UserRiderLevel SET Rider ID = ?, Rider Level = ?, Rider EXP = ?, Rider EXP to Next Level = ? WHERE User ID = ?"
            );
            statement.setInt(1, itemToSave.getRider ID());
            statement.setInt(2, itemToSave.getRider level());
            statement.setInt(3, itemToSave.getRider EXP());
            statement.setInt(4, itemToSave.getRider EXP to next level());











            statement.setInt(5, itemToSave.getUser ID());
            statement.executeUpdate();
            return "OK";
        } catch (SQLException resultsException) {
            String error = "Database error - can't update 'UserRiderLevel' table: " + resultsException.getMessage();

            Logger.log(error);
            return error;
        }
    }

    public static String deleteById(int id) {
        try {
            PreparedStatement statement = DatabaseConnection.newStatement(
                "DELETE FROM UserRiderLevel WHERE User ID = ?"
            );
            statement.setInt(1, id);
            statement.executeUpdate();
            return "OK";
        } catch (SQLException resultsException) {
            String error = "Database error - can't delete by id from 'UserRiderLevel' table: " + resultsException.getMessage();

            Logger.log(error);
            return error;
        }
    }

}